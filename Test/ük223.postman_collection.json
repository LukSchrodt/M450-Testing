{
	"info": {
		"_postman_id": "6152fc8a-5470-41bd-8397-7f5e2455a538",
		"name": "Ã¼k223",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20074888"
	},
	"item": [
		{
			"name": "login",
			"item": [
				{
					"name": "Login as Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response Header contains token\r",
									"pm.test(\"Response-Header contains access-token\", function (){\r",
									"    var headerValue = pm.response.headers.get('Authorization');\r",
									"    pm.environment.set(\"token\", headerValue);\r",
									"})\r",
									"\r",
									"\r",
									"//Status Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Response Body contains a user and the User should have the role ADMIN\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\", \"id\", \"roles\", \"ADMIN\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"admin@example.com\",\r\n    \"password\": \"007\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/user/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login As User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response Header contains token\r",
									"pm.test(\"Response-Header contains access-token\", function (){\r",
									"    var headerValue = pm.response.headers.get('Authorization');\r",
									"    pm.environment.set(\"usertoken\", headerValue);\r",
									"})\r",
									"\r",
									"\r",
									"//Status Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Response Body contains a user and the User should have the role USER\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\", \"id\", \"roles\", \"USER\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user@example.com\",\r\n    \"password\": \"007\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/user/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "wrong login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//if the login is wrong, then the response should be Unauthorized\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/user/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response-Header contains access-token\", function (){\r",
									"    var headerValue = pm.response.headers.get('Authorization');\r",
									"    pm.environment.set(\"usertoken2\", headerValue);\r",
									"})\r",
									"\r",
									"\r",
									"//Status Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Response Body contains a user and the User should have the role USER\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\", \"id\", \"roles\", \"USER\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"user@example1.com\",\r\n    \"password\": \"007\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/user/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register User",
			"item": [
				{
					"name": "register user as admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//A User with the role admin is able to create a user\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"//Responsebody should contain a user\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\",\"lastName\", \"id\", \"roles\", \"email\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/user/register",
							"host": [
								"{{URL}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User as User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{usertoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/user/register",
							"host": [
								"{{URL}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "list of listentys",
			"item": [
				{
					"name": "get All ListEntrys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//A User should be able to get all listentrys\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Response BOdy contaisn at least 1 post\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"priority\", \"id\", \"text\", \"title\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/my_lists/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"my_lists",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get all listentrys of current user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//The User has the Firstname james, so the entrys should also contains the user with the name james\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"});\r",
									"\r",
									"//Response BOdy contaisn at least 1 post\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"priority\", \"id\", \"text\", \"title\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{usertoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/my_lists/mylist",
							"host": [
								"{{URL}}"
							],
							"path": [
								"my_lists",
								"mylist"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all List Entrys sorted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response BOdy contaisn at least 1 post\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"priority\", \"id\", \"text\", \"title\");\r",
									"})\r",
									"\r",
									"//A User should be able to get all listentrys\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/my_lists/sorted",
							"host": [
								"{{URL}}"
							],
							"path": [
								"my_lists",
								"sorted"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MyListEntry Post->Get->Update->Delete",
			"item": [
				{
					"name": "Create ListEntry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//A User can create a Listentry\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//the new created entry has to contain a title, a id and a priority\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\", \"id\", \"priority\");\r",
									"})\r",
									"\r",
									"pm.test(\"Response Body get id\", function (){\r",
									"    var id = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"entryId\", id.id);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomProductName}}\",\r\n    \"text\": \"{{$randomLoremText}}\",\r\n    \"priority\": \"HIGH\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/my_lists/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"my_lists",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Entry By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//the new created entry has to contain a title, a id and a priority\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\", \"id\", \"priority\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/my_lists/{{entryId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"my_lists",
								"{{entryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update MyEntry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Admin should be able to edit every entry\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\", \"id\", \"text\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Test new Title\",\r\n    \"text\": \"This post was edit\",\r\n    \"priority\": \"LOW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/my_lists/{{entryId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"my_lists",
								"{{entryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized Put",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//A User should with role User should not be able to edit a other user's post\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{usertoken2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Unauthorized Test\",\r\n    \"text\": \"This post was edit\",\r\n    \"priority\": \"LOW\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/my_lists/{{entryId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"my_lists",
								"{{entryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//A User should not be able to delete a other user's post\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{usertoken2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/my_lists/{{entryId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"my_lists",
								"{{entryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete entry",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//No Response Body and Satus Code should be 204\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/my_lists/{{entryId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"my_lists",
								"{{entryId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Test",
			"item": [
				{
					"name": "Get All Users as Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Response Body should contain as least 1 User\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\", \"id\", \"roles\", \"lastName\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/user/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All User as User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//A User with the Role User should not be alowed to get all Users\r",
									"pm.test(\"No Response and Unauthorized or Forbidden\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{usertoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/user/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Test User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//A User with the role admin is able to create a user\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"//Responsebody should contain a user\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\",\"lastName\", \"id\", \"roles\", \"email\");\r",
									"})\r",
									"\r",
									"//set response user id as env variable\r",
									"pm.test(\"Response Body get User id\", function (){\r",
									"    var id = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"testUserId\", id.id);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/user/register",
							"host": [
								"{{URL}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit User by Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"//Responsebody should contain a user\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\",\"lastName\", \"id\", \"roles\", \"email\");\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"test user\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/user/{{testUserId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"user",
								"{{testUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized User Edit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//User with Role user should not be able to edit a user\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{usertoken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"test user\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/user/{{testUserId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"user",
								"{{testUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized User Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//User with Roel user should not be able to delet a user\r",
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{usertoken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/user/{{testUserId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"user",
								"{{testUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//User with Role Admin should be able to delet User\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/user/{{testUserId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"user",
								"{{testUserId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}