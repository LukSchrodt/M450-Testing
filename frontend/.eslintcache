[{"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\index.tsx":"1","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\App.tsx":"2","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\Contexts\\ActiveUserContext.tsx":"3","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\Router\\Router.tsx":"4","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\config\\Api.ts":"5","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\Services\\AuthorityService.ts":"6","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\Services\\UserService.ts":"7","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\Router\\PrivateRoute.tsx":"8","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\Unauthorized.tsx":"9","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\AdminHomePage.tsx":"10","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\HomePage.tsx":"11","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\UserEntryListPage.tsx":"12","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\userListPage\\UserListPage.tsx":"13","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\landingPage\\LandingPage.tsx":"14","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\LoginPage\\LoginPage.tsx":"15","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\PageStyles.ts":"16","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\Services\\PostService.ts":"17","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\landingbox\\LandingBox.tsx":"18","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\bottombar\\BottomBar.tsx":"19","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\postLists\\UserPostList.tsx":"20","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\addPostCard\\AddPostCard.tsx":"21","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\navbar\\Navbar.tsx":"22","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\addUserCard\\AddUserCard.tsx":"23","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\userList\\UserList.tsx":"24","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\postLists\\AllPostList.tsx":"25","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\bottombar\\BottomBarStyles.ts":"26","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\postLists\\ListStyles.ts":"27","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\userList\\ListStyles.ts":"28","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\postcard\\OptionPostCard.tsx":"29","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\postcard\\PostCard.tsx":"30","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\userInfoCard\\UserInfoCard.tsx":"31","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\usercard\\UserCard.tsx":"32","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\atoms\\formikTextFields\\FormikTextField.tsx":"33","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\atoms\\navigationItems\\BottomNavigationItem.tsx":"34","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\atoms\\buttons\\normalbutton\\NormalButton.tsx":"35","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\atoms\\buttons\\fab\\FloatingActionButton.tsx":"36","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\updateUserCard\\UpdateUserCard.tsx":"37","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\updatePostCard\\UpdatePostCard.tsx":"38"},{"size":382,"mtime":1698674418303,"results":"39","hashOfConfig":"40"},{"size":316,"mtime":1698674418279,"results":"41","hashOfConfig":"40"},{"size":6322,"mtime":1698674418280,"results":"42","hashOfConfig":"40"},{"size":2482,"mtime":1698674418281,"results":"43","hashOfConfig":"40"},{"size":1985,"mtime":1698674418301,"results":"44","hashOfConfig":"40"},{"size":1171,"mtime":1698674418282,"results":"45","hashOfConfig":"40"},{"size":1392,"mtime":1698674418283,"results":"46","hashOfConfig":"40"},{"size":2262,"mtime":1698674418281,"results":"47","hashOfConfig":"40"},{"size":576,"mtime":1698674418299,"results":"48","hashOfConfig":"40"},{"size":1975,"mtime":1698674418297,"results":"49","hashOfConfig":"40"},{"size":1892,"mtime":1698674418298,"results":"50","hashOfConfig":"40"},{"size":2185,"mtime":1698674418300,"results":"51","hashOfConfig":"40"},{"size":1944,"mtime":1698674418301,"results":"52","hashOfConfig":"40"},{"size":525,"mtime":1698674418300,"results":"53","hashOfConfig":"40"},{"size":3666,"mtime":1698674418298,"results":"54","hashOfConfig":"40"},{"size":542,"mtime":1698674418299,"results":"55","hashOfConfig":"40"},{"size":1225,"mtime":1698674418282,"results":"56","hashOfConfig":"40"},{"size":1030,"mtime":1698674418288,"results":"57","hashOfConfig":"40"},{"size":878,"mtime":1698674418287,"results":"58","hashOfConfig":"40"},{"size":1225,"mtime":1698674418294,"results":"59","hashOfConfig":"40"},{"size":5463,"mtime":1698674418291,"results":"60","hashOfConfig":"40"},{"size":2846,"mtime":1698674418292,"results":"61","hashOfConfig":"40"},{"size":4854,"mtime":1698674418292,"results":"62","hashOfConfig":"40"},{"size":1203,"mtime":1698674418297,"results":"63","hashOfConfig":"40"},{"size":1634,"mtime":1698674418293,"results":"64","hashOfConfig":"40"},{"size":231,"mtime":1698674418287,"results":"65","hashOfConfig":"40"},{"size":330,"mtime":1698674418294,"results":"66","hashOfConfig":"40"},{"size":342,"mtime":1698674418296,"results":"67","hashOfConfig":"40"},{"size":2894,"mtime":1698674418289,"results":"68","hashOfConfig":"40"},{"size":1962,"mtime":1698674418289,"results":"69","hashOfConfig":"40"},{"size":3848,"mtime":1698674418290,"results":"70","hashOfConfig":"40"},{"size":2811,"mtime":1698674418290,"results":"71","hashOfConfig":"40"},{"size":864,"mtime":1698674418286,"results":"72","hashOfConfig":"40"},{"size":707,"mtime":1698674418286,"results":"73","hashOfConfig":"40"},{"size":591,"mtime":1698674418285,"results":"74","hashOfConfig":"40"},{"size":650,"mtime":1698674418284,"results":"75","hashOfConfig":"40"},{"size":5046,"mtime":1698674418295,"results":"76","hashOfConfig":"40"},{"size":5130,"mtime":1698674418295,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1o2such",{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\index.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\App.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\Contexts\\ActiveUserContext.tsx",["167"],"import { createContext, useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport api from '../config/Api';\r\nimport roles from '../config/Roles';\r\nimport AuthorityService from '../Services/AuthorityService';\r\nimport UserService from '../Services/UserService';\r\nimport { User } from '../types/models/User.model';\r\nimport { Nullable } from '../types/Nullable';\r\n\r\n/**\r\n * USER_DATA_LOCAL_STORAGE_KEY defines the localStorageKey in which the\r\n * activeUser gets stored.\r\n */\r\nexport const USER_DATA_LOCAL_STORAGE_KEY = 'user';\r\nexport const TOKEN_LOCAL_STORAGE_KEY = 'token';\r\n\r\n/**\r\n * ActiveUserContextType defines the provided values\r\n */\r\nexport type ActiveUserContextType = {\r\n  user: Nullable<User>;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  setActiveUser: (user: User) => void;\r\n  loadActiveUser: () => void;\r\n  checkRole: (roleToCheck: keyof typeof roles) => boolean;\r\n};\r\n\r\n/**\r\n * noContextProviderFound is a method that throws an error and is used\r\n * inside the defaultContextValue\r\n */\r\nconst noContextProviderFound = () => {\r\n  throw new Error('No provider for the ActiveUserContext found');\r\n};\r\n\r\n/**\r\n * defaultContextValue defines the default values for the ActiveUserContext.\r\n */\r\nconst defaultContextValue: ActiveUserContextType = {\r\n  user: null,\r\n  login: noContextProviderFound,\r\n  logout: noContextProviderFound,\r\n  setActiveUser: noContextProviderFound,\r\n  loadActiveUser: noContextProviderFound,\r\n  checkRole: noContextProviderFound,\r\n};\r\n\r\n/**\r\n * ActiveUserContext has the purpose of providing the currently active user\r\n * as well as related values, modifiers and related operations such as login\r\n * and logout.\r\n */\r\nconst ActiveUserContext =\r\n  createContext<ActiveUserContextType>(defaultContextValue);\r\nexport default ActiveUserContext;\r\n\r\n/**\r\n * Props for the ActiveUserContextProvider Component\r\n */\r\ntype ActiveUserContextProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * ActiveUserContextProvider Component is used to provide the ActiveUserContext\r\n * to all child-components.\r\n * @param children consists of all the elements that are located inside the\r\n */\r\nexport const ActiveUserContextProvider = ({\r\n  children,\r\n}: ActiveUserContextProviderProps) => {\r\n  /**\r\n   * Try to load the user data that is stored inside the LocalStorage.\r\n   * If non is present, null will be returned.\r\n   */\r\n  const loadSavedUserData = (): Nullable<User> => {\r\n    const storeUser = localStorage.getItem(USER_DATA_LOCAL_STORAGE_KEY);\r\n    if (storeUser === null) return null;\r\n    return JSON.parse(storeUser);\r\n  };\r\n\r\n  // The following line defines the user state which is holding the user\r\n  // data inside this context.\r\n  const [user, setUser] = useState<Nullable<User>>(() => loadSavedUserData());\r\n  const navigate = useNavigate();\r\n  /**\r\n   * Update the user that is provided by the ActiveUserContext\r\n   * @param updatedUser\r\n   */\r\n  const setActiveUser = (updatedUser: User) => {\r\n    setUser(updatedUser);\r\n    localStorage.setItem(\r\n      USER_DATA_LOCAL_STORAGE_KEY,\r\n      JSON.stringify(updatedUser)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Remove all user and authorization related data from the localStorage\r\n   */\r\n  const resetAuthorization = () => {\r\n    // Reset the stored data inside the AuthorityService.\r\n    AuthorityService.clearAuthorities();\r\n    // Clear all data from the localStorage.\r\n    localStorage.clear();\r\n    // Set the user, which is stored inside the context to null.\r\n    setUser(null);\r\n  };\r\n\r\n  /**\r\n   * Logout the currently active user by resetting the stored user data\r\n   * and redirecting to the LoginPage.\r\n   */\r\n  const logout = () => {\r\n    // If no token is saved inside the local storage clear the localStorage directly\r\n    if (localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY) === null) {\r\n      resetAuthorization();\r\n      return;\r\n    }\r\n    // If a token is present send a logout-request and clear the localStorage afterwards\r\n    api.get('/logout').finally(resetAuthorization);\r\n    //navigate to login page\r\n    navigate('/login');\r\n  };\r\n\r\n  /**\r\n   * Login with the provided credentials. If successful the current user gets\r\n   * updated and stored inside the context. Also the JWT-Token for further\r\n   * request based authentication is stored inside the localStorage.\r\n   * @param email\r\n   * @param password\r\n   */\r\n  const login = async (email: string, password: string) => {\r\n    await api.post('user/login', { email, password }).then((response: any) => {\r\n      console.log(response.headers.authorization);\r\n      localStorage.setItem(\r\n        TOKEN_LOCAL_STORAGE_KEY,\r\n        response.headers.authorization\r\n      );\r\n      setActiveUser(response.data);\r\n      return true;\r\n    });\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Request the user data for the currently active user from the api\r\n   * and save it to the context-state.\r\n   */\r\n  const loadActiveUser = () => {\r\n    return user\r\n      ? UserService.getUser(user.id).then((res: any) => {\r\n          setActiveUser(res.data);\r\n        })\r\n      : null;\r\n  };\r\n\r\n  function activeUserHasRole(roleToCheck: keyof typeof roles): boolean {\r\n    return user ? user.roles.some((role) => role.name === roleToCheck) : false;\r\n  }\r\n\r\n  /**\r\n   * Try to load the user-object from the localStorage if present.\r\n   * This is done automatically on the first render of this component.\r\n   */\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\r\n    if (token !== null) {\r\n      loadActiveUser();\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * If the user state is updated and the user is not equal to null,\r\n   * the data used in the AuthorityService as well as the data stored inside\r\n   * the localStorage will be updated with the new user-data.\r\n   */\r\n  useEffect(() => {\r\n    if (user !== null) {\r\n      AuthorityService.initAuthoritySet(user);\r\n      localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(user));\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <div>\r\n      <ActiveUserContext.Provider\r\n        value={{\r\n          user,\r\n          setActiveUser,\r\n          login,\r\n          logout,\r\n          loadActiveUser,\r\n          checkRole: activeUserHasRole,\r\n        }}\r\n      >\r\n        {children}\r\n      </ActiveUserContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\Router\\Router.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\config\\Api.ts",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\Services\\AuthorityService.ts",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\Services\\UserService.ts",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\Router\\PrivateRoute.tsx",["168","169"],"import React, { useContext } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport ActiveUserContext from '../Contexts/ActiveUserContext';\r\nimport AuthorityService from '../Services/AuthorityService';\r\nimport { Authority } from '../types/models/Authority.model';\r\n\r\ninterface Props {\r\n  element: React.ReactElement;\r\n  authorities: string[];\r\n}\r\n\r\ntype JWTType = {\r\n  iss: string;\r\n  exp: number;\r\n};\r\n\r\nconst PrivateRoute: React.FC<Props> = ({\r\n  element: RouteComponent,\r\n  authorities: authorities,\r\n}) => {\r\n  const activeUserContext = useContext(ActiveUserContext);\r\n  /**\r\n   * isLoggedIn checks if the token, which is saved inside the localStorage,\r\n   * exists, isn't expired yet and has been issued by the correct issuer.\r\n   * If all of the above is true the user is seen as logged in.\r\n   */\r\n  const isLoggedIn = () => {\r\n    let tokenString = localStorage.getItem('token');\r\n    if (!tokenString) {\r\n      console.error('no token found');\r\n      return false;\r\n    }\r\n    tokenString = tokenString.replace('Bearer ', '');\r\n    const token: JWTType = jwt.decode(tokenString) as JWTType;\r\n    // Check if token does not exist or doesn't have an expiration claim or is expired.\r\n    if (!token || !token.exp || token.exp < Date.now() / 1000) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n  /**\r\n   * If the user is not logged in call activeUserContext.logout, which destroys\r\n   * all locally saved user data and redirects to /login.\r\n   */\r\n  if (!isLoggedIn()) {\r\n    activeUserContext.logout();\r\n    return <Navigate to='/login' replace={true} />;\r\n  }\r\n  /**\r\n   * Check if the active user has at least 1 of the needed authorities.\r\n   * If no authorities are needed true is returned.\r\n   */\r\n  const hasNeededAuthorities =\r\n    authorities.length === 0 || authorities.some(AuthorityService.hasAuthority);\r\n\r\n  /**\r\n   * If the user doesn't possess the needed authorities Redirect the user to\r\n   * /unauthorized\r\n   */\r\n  if (!hasNeededAuthorities) {\r\n    return <Navigate to='/unauthorized' replace={true} />;\r\n  }\r\n\r\n  // All checks passed\r\n  return (\r\n    // Pagelayout puts the Navigation, Menu etc. around the component\r\n    RouteComponent\r\n  );\r\n};\r\nexport default PrivateRoute;\r\n","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\Unauthorized.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\AdminHomePage.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\HomePage.tsx",["170"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport Navbar from \"../organisms/navbar/Navbar\";\r\nimport AllPostList from \"../organisms/postLists/AllPostList\";\r\nimport PageStyles from \"./PageStyles\";\r\nimport {Box} from \"@mui/material\";\r\nimport BottomBar from '../molecules/bottombar/BottomBar';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {MyListEntry} from \"../../types/models/MyListEntry.model\";\r\nimport PostService from \"../../Services/PostService\";\r\nimport AddPostCard from \"../organisms/addPostCard/AddPostCard\";\r\nimport ActiveUserContext from \"../../Contexts/ActiveUserContext\";\r\nimport AdminHomePage from \"./AdminHomePage\";\r\n\r\n\r\nexport default function HomePage() {\r\n    const [posts, setPosts] = useState<MyListEntry[]>([]);\r\n    useEffect(() => {\r\n        PostService.getAllPostsSorted().then((response) => {\r\n            setPosts(response);\r\n            navigate('/home');\r\n        })\r\n    }, []);\r\n    const text = [\"All Post\", \"Your Posts\", \"recent\", \"help\"];\r\n    const navigate = useNavigate();\r\n    const defaultNavigate = () => {\r\n        console.log(\"hey\");\r\n    }\r\n    const allPost = () => {\r\n        navigate(\"/home\");\r\n    }\r\n    const userPosts = () => {\r\n        navigate(\"/mylist\");\r\n    }\r\n    const { checkRole } = useContext(ActiveUserContext);\r\n    return (\r\n        <div>\r\n            {checkRole(\"ADMIN\") === true ? (\r\n                <AdminHomePage/>\r\n            ): (\r\n                <Box sx={PageStyles.homepage}>\r\n                    <Navbar/>\r\n                    <BottomBar text={text} icon={[\"Forum\", \"ChatBubble\", \"Restore\", \"Help\", \"Group\"]} onClick={[allPost, userPosts, defaultNavigate, defaultNavigate]}/>\r\n                    <AllPostList posts={posts} setPostList={setPosts}/>\r\n                    <AddPostCard setPostList={setPosts} allPosts={true}/>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\UserEntryListPage.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\userListPage\\UserListPage.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\landingPage\\LandingPage.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\LoginPage\\LoginPage.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\pages\\PageStyles.ts",["171"],"import {SxProps} from \"@mui/material\";\r\n\r\nconst homepage : SxProps = {\r\n    height: \"100vh\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n    overflowY: \"hidden\",\r\n};\r\n\r\nconst landingpage : SxProps = {\r\n    height: \"100vh\",\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n    overflowY: \"hidden\",\r\n    background: 'linear-gradient(to right bottom, #7aabf5, #0066ff)',\r\n}\r\n\r\nexport default {homepage, landingpage};","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\Services\\PostService.ts",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\landingbox\\LandingBox.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\bottombar\\BottomBar.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\postLists\\UserPostList.tsx",["172"],"import React, {useEffect, useState} from 'react';\r\nimport {MyListEntry} from \"../../../types/models/MyListEntry.model\";\r\nimport {Grid} from \"@mui/material\";\r\nimport ListStyles from \"./ListStyles\";\r\nimport OptionPostCard from \"../../molecules/postcard/OptionPostCard\";\r\nimport PostCard from \"../../molecules/postcard/PostCard\";\r\nimport PostService from \"../../../Services/PostService\";\r\n\r\ntype Props = {\r\n    posts: MyListEntry[];\r\n    setPostList: Function;\r\n}\r\n\r\nexport default function UserPostList({posts, setPostList}: Props){\r\n    const [list, setList] = useState<MyListEntry[]>([]);\r\n    useEffect(() => {\r\n        setList(posts);\r\n    }, [posts]);\r\n\r\n    const renderPostList = () => {\r\n        PostService.getAllPosts().then((response)=> {\r\n            setPostList(response);\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div className=\"list\">\r\n            <Grid container spacing={{ xs: 3, md: 3 }} sx={ListStyles.list}>\r\n                {list.map((post: MyListEntry) => (\r\n                    <Grid xs={3} md={3} lg={3} sx={{mt:2}}>\r\n                            <OptionPostCard post={post} upDateList={renderPostList}/>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    );\r\n}","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\addPostCard\\AddPostCard.tsx",["173"],"import React, {useState} from 'react';\r\nimport {Box, Button, Dialog, DialogActions, Grid,Typography} from '@mui/material';\r\nimport {Field, Form, Formik, FormikHelpers, FormikProps} from 'formik';\r\nimport * as yup from 'yup';\r\nimport FloatingActionButton from '../../atoms/buttons/fab/FloatingActionButton';\r\nimport {FormikTextField} from \"../../atoms/formikTextFields/FormikTextField\";\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport PostService from \"../../../Services/PostService\";\r\n\r\n/**\r\n * Pop Up to create a new Post\r\n */\r\n\r\ninterface FormValues {\r\n    title: string;\r\n    text: string;\r\n    priority: string;\r\n}\r\n\r\nconst validationSchema = yup.object().shape({\r\n    title: yup.string().required(\"Please Enter a Title\"),\r\n    text: yup.string().required(\"Please Enter a Text\"),\r\n    priority: yup.string().required(\"Please choose a Priority\"),\r\n});\r\n\r\ntype Props = {\r\n    setPostList : Function;\r\n    allPosts: boolean;\r\n}\r\n\r\nexport default function AddPostCard({setPostList, allPosts}: Props){\r\n    const [openPopUp, setOpenPopUp] = useState(false);\r\n    const handleClose = () => {\r\n        setOpenPopUp(false);\r\n    };\r\n    const [value, setValue] = useState('LOW');\r\n    return(\r\n        <div>\r\n            <Dialog open={openPopUp} onClose={handleClose} sx={{ height: \"100%\",\r\n                width: \"100%\",\r\n                bgcolor: \"transparent\",\r\n                alignItems: \"center\",}}>\r\n                <DialogActions sx={{ maxWidth: 1000, maxHeight: 600}}>\r\n                    <Box sx={{ overflowX: \"hidden\", width: \"100%\" }}>\r\n                        <Grid container alignItems=\"center\">\r\n                            <Grid xs={3} md={3} lg={3} sx={{textAlign: \"left\"}}>\r\n                                <IconButton onClick={() => setOpenPopUp(false)}>\r\n                                    <CloseIcon/>\r\n                                </IconButton>\r\n                            </Grid>\r\n                            <Grid xs={9} md={9} lg={9} sx={{textAlign: \"left\"}}>\r\n                                <Typography sx={{fontSize: 28, fontWeight: \"bold\"}}>Create new Post</Typography>\r\n                            </Grid>\r\n                            <Formik\r\n                                initialValues={{\r\n                                    title: '',\r\n                                    text: '',\r\n                                    priority: value,\r\n                                }}\r\n                                validationSchema={validationSchema}\r\n                                onSubmit={(values: FormValues, formikHelpers: FormikHelpers<FormValues>) => {\r\n                                    PostService.createPost(values).then((response)=> {\r\n                                        if(allPosts === true){\r\n                                            PostService.getAllPostsSorted().then((response) => {\r\n                                                setPostList(response);\r\n                                            })\r\n                                        }else{\r\n                                            PostService.getAllPosts().then((response) => {\r\n                                                setPostList(response);\r\n                                            })\r\n                                        }\r\n                                    });\r\n                                    formikHelpers.setSubmitting(false);\r\n                                    setOpenPopUp(false);\r\n                                }}\r\n                            >\r\n                                {(formikProps: FormikProps<FormValues>) => (\r\n                                    <Form noValidate autoComplete=\"off\">\r\n                                        <Field name=\"title\" label=\"title\" component={FormikTextField} />\r\n                                        <Field name=\"text\" label=\"text\" component={FormikTextField} />\r\n                                        <div role=\"group\">\r\n                                            <label>\r\n                                                <Field type=\"radio\" name=\"priority\" value=\"HIGH\"/>\r\n                                                HIGH\r\n                                            </label>\r\n                                            <label>\r\n                                                <Field type=\"radio\" name=\"priority\" value=\"MEDIUM\"/>\r\n                                                MEDIUM\r\n                                            </label>\r\n                                            <label>\r\n                                                <Field type=\"radio\" name=\"priority\" value=\"LOW\"/>\r\n                                                LOW\r\n                                            </label>\r\n                                        </div>\r\n                                        <Button type=\"submit\" disabled={formikProps.isSubmitting} variant=\"contained\" sx={{ml: \"15%\", width: \"70%\", mr: \"15%\", mt: 5}}>\r\n                                            Save Post\r\n                                        </Button>\r\n                                    </Form>\r\n                                )}\r\n                            </Formik>\r\n                        </Grid>\r\n                    </Box>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <FloatingActionButton icon=\"Add\" text=\"Create post\" onClick={() => {setOpenPopUp(true);}}/>\r\n        </div>\r\n    )\r\n}","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\navbar\\Navbar.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\addUserCard\\AddUserCard.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\userList\\UserList.tsx",["174"],"import React, {useEffect, useState } from 'react';\r\nimport ListStyles from './ListStyles';\r\nimport './List.css';\r\nimport { User } from '../../../types/models/User.model';\r\nimport {Grid } from '@mui/material';\r\nimport UserCard from '../../molecules/usercard/UserCard';\r\nimport PostService from \"../../../Services/PostService\";\r\nimport UserService from \"../../../Services/UserService\";\r\n\r\n/**\r\n * List with all Users\r\n */\r\n\r\ntype Props = {\r\n    users:User[];\r\n    setUserList: Function;\r\n}\r\n\r\nexport default function UserList({users, setUserList}: Props){\r\n    const [list, setList] = useState<User[]>([]);\r\n    useEffect(() => {\r\n        setList(users);\r\n    }, [users]);\r\n\r\n    const renderUserList = () => {\r\n        UserService.getAllUsers().then((response)=> {\r\n            setUserList(response);\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div className=\"list\">\r\n        <Grid container spacing={{ xs: 3, md: 3 }} sx={ListStyles.list}>\r\n            {list.map((user : User) => (\r\n                <Grid xs={3} md={3} lg={3} sx={{mt:2}}>\r\n                    <UserCard user={user} setUserList={renderUserList}/>\r\n                    </Grid>\r\n            ))}\r\n        </Grid>\r\n        </div>\r\n    )\r\n\r\n}","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\postLists\\AllPostList.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\bottombar\\BottomBarStyles.ts",["175"],"import {SxProps} from \"@mui/material\";\r\n\r\nconst bottomBar : SxProps = {\r\n    top: 54,\r\n    left: 0,\r\n    right: 0,\r\n    minHeight: \"52px\",\r\n    width: \"100%\",\r\n    flex: 1,\r\n    position: \"fixed\",\r\n};\r\n\r\nexport default {bottomBar};","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\postLists\\ListStyles.ts",["176"],"import {SxProps} from \"@mui/material\";\r\n\r\nconst list : SxProps = {\r\n    display: \"flex\",\r\n    paddingTop: 4,\r\n    flexGrow: 1,\r\n    paddingBottom: 1,\r\n    paddingLeft: 2,\r\n    height: \"100%\",\r\n    ml: 2,\r\n    overflowY: \"scroll\",\r\n    background: 'linear-gradient(to right bottom, #7aabf5, #0066ff)',\r\n};\r\n\r\nexport default {list};","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\userList\\ListStyles.ts",["177"],"import {SxProps} from \"@mui/material\";\r\n\r\nconst list : SxProps = {\r\n    display: \"flex\",\r\n    paddingTop: 4,\r\n    flexGrow: 1,\r\n    paddingBottom: 1,\r\n    paddingLeft: 2,\r\n    height: \"100%\",\r\n    ml: 2,\r\n    overflowY: \"scroll\",\r\n    mt: 2,\r\n    background: 'linear-gradient(to right bottom, #7aabf5, #0066ff)',\r\n};\r\n\r\nexport default {list};","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\postcard\\OptionPostCard.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\postcard\\PostCard.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\userInfoCard\\UserInfoCard.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\molecules\\usercard\\UserCard.tsx",["178","179"],"import {Avatar, Card, Grid, Typography } from '@mui/material';\r\nimport React, { useState } from 'react';\r\nimport { User } from '../../../types/models/User.model';\r\nimport NormalButton from '../../atoms/buttons/normalbutton/NormalButton';\r\nimport UserService from \"../../../Services/UserService\";\r\nimport UpdatePostCard from \"../../organisms/updatePostCard/UpdatePostCard\";\r\nimport UpdateUserCard from \"../../organisms/updateUserCard/UpdateUserCard\";\r\n\r\n/**\r\n * Usercard, the user details are Displayed and you can change them\r\n */\r\n\r\ntype Props = {\r\n    user: User;\r\n    setUserList: Function;\r\n}\r\n\r\nexport default function UserCard({user, setUserList}: Props){\r\n    const fullname : string = user.firstName + ' ' + user.lastName;\r\n\r\n    const deleteUser = () => {\r\n        UserService.deleteUser(user.id).then((response) => {\r\n            setUserList();\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n\r\n    return(\r\n        <Card sx={{width: \"95%\"}}>\r\n            <Grid container alignItems=\"center\">\r\n                <Grid xs={4} md={4} lg={4}>\r\n                    <></>\r\n                </Grid>\r\n                <Grid xs={4} md={4} lg={4} sx={{itemAlign: \"center\"}}>\r\n                   <Avatar {...stringAvatar(fullname)} sx={{ml: 5, mt: 1, fontSize: 22}}/>\r\n                </Grid>\r\n                <Grid xs={4} md={4} lg={4}>\r\n                    <></>\r\n                </Grid>\r\n                <Grid xs={6} md={6} lg={6} sx={{mt: 4}}>\r\n                    <Typography variant=\"body2\" sx={{ml: 1, fontSize: 15}}>Firstname: </Typography>\r\n                    <Typography variant=\"body1\" sx={{ml: 1}}>{user.firstName}</Typography>\r\n                </Grid>\r\n                <Grid xs={6} md={6} lg={6} sx={{mt: 4}}>\r\n                    <Typography variant=\"body2\" sx={{fontSize: 15}}>Lastname: </Typography>\r\n                    <Typography>{user.lastName}</Typography>\r\n                </Grid>\r\n                <Grid xs={12} md={12} lg={12} sx={{mt:2}}>\r\n                    <Typography variant=\"body2\" sx={{ml: 1, fontSize: 15}}>Email-Adress: </Typography>\r\n                    <Typography variant=\"body1\" sx={{ml: 1}}>{user.email}</Typography>\r\n                </Grid>\r\n                <Grid xs={6} md={6} lg={6} sx={{mt:7, mb: 3}}>\r\n                    <UpdateUserCard user={user} upDateUserList={setUserList}/>\r\n                </Grid>\r\n                <Grid xs={6} md={6} lg={6} sx={{mt:7, mb: 3}}>\r\n                    <NormalButton text=\"Delete\" sx={{bgcolor: \"#a67f32\", mr: 5}} onClick={deleteUser}/>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\n/**\r\n * Function to create UserAvatar\r\n */\r\n\r\nfunction stringAvatar(name : string){\r\n    return {\r\n        children: `${name.split(' ')[0][0]}${name.split(' ')[1][0]}`,\r\n    };\r\n}","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\atoms\\formikTextFields\\FormikTextField.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\atoms\\navigationItems\\BottomNavigationItem.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\atoms\\buttons\\normalbutton\\NormalButton.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\atoms\\buttons\\fab\\FloatingActionButton.tsx",[],"C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\updateUserCard\\UpdateUserCard.tsx",["180"],"import React, {useState} from 'react';\r\nimport * as yup from \"yup\";\r\nimport {User} from \"../../../types/models/User.model\";\r\nimport {Box, Button, Dialog, DialogActions, Grid, Typography} from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport {Field, Form, Formik, FormikHelpers, FormikProps} from \"formik\";\r\nimport UserService from \"../../../Services/UserService\";\r\nimport {FormikTextField} from \"../../atoms/formikTextFields/FormikTextField\";\r\nimport FloatingActionButton from \"../../atoms/buttons/fab/FloatingActionButton\";\r\nimport NormalButton from \"../../atoms/buttons/normalbutton/NormalButton\";\r\n\r\n/**\r\n * This is a Popop, which is displayed, if u click the Edit Button on a Usercard\r\n * On this Popup you can edit a User\r\n */\r\n\r\ninterface FormValues {\r\n    firstname: string;\r\n    lastname: string;\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\nconst validationSchema = yup.object().shape({\r\n    firstname: yup.string().required(\"Please Enter a Name\"),\r\n    lastname: yup.string().required(\"Please Enter a Name\"),\r\n    email: yup.string().required(\"Please enter a Email\"),\r\n    password: yup.string().required(\"Please Enter a Passowrd\").min(6, \"The Password must be at least 6 characters\"),\r\n});\r\n\r\ntype Props = {\r\n    user: User;\r\n    upDateUserList: Function;\r\n}\r\n\r\nexport default function UpdateUserCard({user, upDateUserList}: Props){\r\n    const [openPopUp, setOpenPopUp] = useState(false);\r\n    const handleClose = () => {\r\n        setOpenPopUp(false);\r\n    };\r\n    return(\r\n        <div>\r\n            <Dialog open={openPopUp} onClose={handleClose} sx={{ height: \"100%\",\r\n                width: \"100%\",\r\n                bgcolor: \"transparent\",\r\n                alignItems: \"center\",}}>\r\n                <DialogActions sx={{ maxWidth: 1000, maxHeight: 600}}>\r\n                    <Box sx={{ overflowX: \"hidden\", width: \"100%\" }}>\r\n                        <Grid container alignItems=\"center\">\r\n                            <Grid xs={3} md={3} lg={3} sx={{textAlign: \"left\"}}>\r\n                                <IconButton onClick={() => setOpenPopUp(false)}>\r\n                                    <CloseIcon/>\r\n                                </IconButton>\r\n                            </Grid>\r\n                            <Grid xs={9} md={9} lg={9} sx={{textAlign: \"left\"}}>\r\n                                <Typography sx={{fontSize: 28, fontWeight: \"bold\"}}>Edit User</Typography>\r\n                            </Grid>\r\n                            <Formik\r\n                                initialValues={{\r\n                                    firstname: user.firstName,\r\n                                    lastname: user.lastName,\r\n                                    email: user.email,\r\n                                    password: ''\r\n                                }}\r\n                                validationSchema={validationSchema}\r\n                                onSubmit={(values: FormValues, formikHelpers: FormikHelpers<FormValues>) => {\r\n                                    UserService.updateUser(user.id, values).then((response) => {\r\n                                            upDateUserList();\r\n                                    }).catch((error) => {\r\n                                        console.log(error);\r\n                                    });\r\n                                    formikHelpers.setSubmitting(false);\r\n                                    setOpenPopUp(false);\r\n                                }}\r\n                            >\r\n                                {(formikProps: FormikProps<FormValues>) => (\r\n                                    <Form noValidate autoComplete=\"off\">\r\n                                        <Field name=\"firstname\" label=\"firstname\" component={FormikTextField} />\r\n                                        <Field name=\"lastname\" label=\"lastname\" component={FormikTextField} />\r\n                                        <Field name=\"email\" label=\"email\" component={FormikTextField} />\r\n                                        <Field\r\n                                            name=\"password\"\r\n                                            label=\"password\"\r\n                                            type=\"password\"\r\n                                            component={FormikTextField}\r\n                                        />\r\n                                        <Button type=\"submit\" disabled={formikProps.isSubmitting} variant=\"contained\" sx={{ml: \"15%\", width: \"70%\", mr: \"15%\", mt: 5}}>\r\n                                            Save User\r\n                                        </Button>\r\n                                    </Form>\r\n                                )}\r\n                            </Formik>\r\n                        </Grid>\r\n                    </Box>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <NormalButton text=\"Edit\" sx={{bgcolor: \"#81a632\", ml: 13}} onClick={()=> setOpenPopUp(true)}/>\r\n        </div>\r\n    );\r\n}","C:\\Users\\luksc\\OneDrive\\Dokumente\\PipleineProject\\Pipeline-Docker\\frontend\\src\\components\\organisms\\updatePostCard\\UpdatePostCard.tsx",["181"],"import React, {useState} from 'react';\r\nimport {MyListEntry} from \"../../../types/models/MyListEntry.model\";\r\nimport * as yup from \"yup\";\r\nimport {Box, Button, Dialog, DialogActions, Grid, Typography} from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport {Field, Form, Formik, FormikHelpers, FormikProps} from \"formik\";\r\nimport PostService from \"../../../Services/PostService\";\r\nimport {FormikTextField} from \"../../atoms/formikTextFields/FormikTextField\";\r\nimport NormalButton from \"../../atoms/buttons/normalbutton/NormalButton\";\r\n\r\n/**\r\n * This is a Popop, which is displayed, if u click the Edit Button on a Postcard\r\n * On this Popup you can edit a Post\r\n */\r\ninterface FormValues {\r\n    title: string;\r\n    text: string;\r\n    priority: string;\r\n}\r\n\r\nconst validationSchema = yup.object().shape({\r\n    title: yup.string().required(\"Please Enter a Title\"),\r\n    text: yup.string().required(\"Please Enter a Text\"),\r\n    priority: yup.string().required(\"Please choose a Priority\"),\r\n});\r\n\r\n\r\ntype Props = {\r\n    post: MyListEntry;\r\n    renderPostList: Function;\r\n}\r\n\r\nexport default function UpdatePostCard({post, renderPostList}: Props){\r\n    const [openPopUp, setOpenPopUp] = useState(false);\r\n    const handleClose = () => {\r\n        setOpenPopUp(false);\r\n    };\r\n    const [value, setValue] = useState(post.priority);\r\n    return(\r\n        <div>\r\n            <Dialog open={openPopUp} onClose={handleClose} sx={{ height: \"100%\",\r\n                width: \"100%\",\r\n                bgcolor: \"transparent\",\r\n                alignItems: \"center\",}}>\r\n                <DialogActions sx={{ maxWidth: 1000, maxHeight: 600}}>\r\n                    <Box sx={{ overflowX: \"hidden\", width: \"100%\" }}>\r\n                        <Grid container alignItems=\"center\">\r\n                            <Grid xs={3} md={3} lg={3} sx={{textAlign: \"left\"}}>\r\n                                <IconButton onClick={() => setOpenPopUp(false)}>\r\n                                    <CloseIcon/>\r\n                                </IconButton>\r\n                            </Grid>\r\n                            <Grid xs={9} md={9} lg={9} sx={{textAlign: \"left\"}}>\r\n                                <Typography sx={{fontSize: 28, fontWeight: \"bold\"}}>Edit Post</Typography>\r\n                            </Grid>\r\n                            <Formik\r\n                                initialValues={{\r\n                                    title: post.title,\r\n                                    text: post.text,\r\n                                    priority: value,\r\n                                }}\r\n                                validationSchema={validationSchema}\r\n                                onSubmit={(values: FormValues, formikHelpers: FormikHelpers<FormValues>) => {\r\n                                    PostService.updatePost(post.id, values).then((response)=> {\r\n                                            renderPostList();\r\n                                    });\r\n                                    formikHelpers.setSubmitting(false);\r\n                                    setOpenPopUp(false);\r\n                                }}\r\n                            >\r\n                                {(formikProps: FormikProps<FormValues>) => (\r\n                                    <Form noValidate autoComplete=\"off\">\r\n                                        <Field name=\"title\" label=\"title\" component={FormikTextField} />\r\n                                        <Field name=\"text\" label=\"text\" component={FormikTextField} />\r\n                                        <div role=\"group\">\r\n                                            <label>\r\n                                                <Field type=\"radio\" name=\"priority\" value=\"HIGH\"/>\r\n                                                HIGH\r\n                                            </label>\r\n                                            <label>\r\n                                                <Field type=\"radio\" name=\"priority\" value=\"MEDIUM\"/>\r\n                                                MEDIUM\r\n                                            </label>\r\n                                            <label>\r\n                                                <Field type=\"radio\" name=\"priority\" value=\"LOW\"/>\r\n                                                LOW\r\n                                            </label>\r\n                                        </div>\r\n                                        <Button type=\"submit\" disabled={formikProps.isSubmitting} variant=\"contained\" sx={{ml: \"15%\", width: \"70%\", mr: \"15%\", mt: 5}}>\r\n                                            Save Changes\r\n                                        </Button>\r\n                                    </Form>\r\n                                )}\r\n                            </Formik>\r\n                        </Grid>\r\n                    </Box>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <NormalButton text=\"Edit\" sx={{bgcolor: \"#81a632\", ml: 13}} onClick={()=> setOpenPopUp(true)}/>\r\n        </div>\r\n    )\r\n}",{"ruleId":"182","severity":1,"message":"183","line":172,"column":6,"nodeType":"184","endLine":172,"endColumn":8,"suggestions":"185"},{"ruleId":"186","severity":1,"message":"187","line":6,"column":10,"nodeType":"188","messageId":"189","endLine":6,"endColumn":19},{"ruleId":"190","severity":1,"message":"191","line":20,"column":3,"nodeType":"192","messageId":"193","endLine":20,"endColumn":27,"fix":"194"},{"ruleId":"182","severity":1,"message":"195","line":22,"column":8,"nodeType":"184","endLine":22,"endColumn":10,"suggestions":"196"},{"ruleId":"197","severity":1,"message":"198","line":22,"column":1,"nodeType":"199","endLine":22,"endColumn":40},{"ruleId":"186","severity":1,"message":"200","line":6,"column":8,"nodeType":"188","messageId":"189","endLine":6,"endColumn":16},{"ruleId":"186","severity":1,"message":"201","line":37,"column":19,"nodeType":"188","messageId":"189","endLine":37,"endColumn":27},{"ruleId":"186","severity":1,"message":"202","line":7,"column":8,"nodeType":"188","messageId":"189","endLine":7,"endColumn":19},{"ruleId":"197","severity":1,"message":"198","line":13,"column":1,"nodeType":"199","endLine":13,"endColumn":28},{"ruleId":"197","severity":1,"message":"198","line":15,"column":1,"nodeType":"199","endLine":15,"endColumn":23},{"ruleId":"197","severity":1,"message":"198","line":16,"column":1,"nodeType":"199","endLine":16,"endColumn":23},{"ruleId":"186","severity":1,"message":"203","line":2,"column":17,"nodeType":"188","messageId":"189","endLine":2,"endColumn":25},{"ruleId":"186","severity":1,"message":"204","line":6,"column":8,"nodeType":"188","messageId":"189","endLine":6,"endColumn":22},{"ruleId":"186","severity":1,"message":"205","line":10,"column":8,"nodeType":"188","messageId":"189","endLine":10,"endColumn":28},{"ruleId":"186","severity":1,"message":"201","line":39,"column":19,"nodeType":"188","messageId":"189","endLine":39,"endColumn":27},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["206"],"@typescript-eslint/no-unused-vars","'Authority' is defined but never used.","Identifier","unusedVar","no-useless-rename","Destructuring assignment authorities unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"207","text":"208"},"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["209"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'PostCard' is defined but never used.","'setValue' is assigned a value but never used.","'PostService' is defined but never used.","'useState' is defined but never used.","'UpdatePostCard' is defined but never used.","'FloatingActionButton' is defined but never used.",{"desc":"210","fix":"211"},[528,552],"authorities",{"desc":"212","fix":"213"},"Update the dependencies array to be: [loadActiveUser]",{"range":"214","text":"215"},"Update the dependencies array to be: [navigate]",{"range":"216","text":"217"},[5566,5568],"[loadActiveUser]",[931,933],"[navigate]"]